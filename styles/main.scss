body {
  margin: 0;
  nav {
    display: flex;
    flex-direction: row;
    align-items: stretch;
    justify-content: center;
    background: #4c4c4c;
    a {
      text-decoration: none;
      font-size: 2.5vw;
      color: white;
      margin: 0 1vw;
      padding: 2.5vw 0.5vw;
      &:hover {
        background: darken(#4c4c4c, 5%);
      }
    }
  }

  main {
    height: 35vw;
    background: {
      repeat: no-repeat;
      size: 100% 100%;
      image: url(../planesky.jpg);
    }
    display: flex;
    justify-content: center;
    align-items: center;
    h2 {
      color: white;
      font-weight: bold;
      font-size: 6vw;

    }
  }

  section {
    height: 45vw;
    background: {
      repeat: no-repeat;
      size: 100% 100%;
      image: url(../hamburg.jpg);
    }
    display: flex;
    // define the whole section as a flex so you
    //  arrange the space between your heading,
    //  your paragraph and your form. This is not absolutely
    // necessary but it helps
    flex-direction: column;
    justify-content: space-around;
    align-items: center;
    h2 {
      font-size: 4vw;
      color: white;
    }
    p {
      font-size: 1.7vw;
      font-family: tahoma;
      width: 90%;
      color: white;
      background: rgba(0, 0, 0, 0.7);
    }

    form {
      // Make this form a grid container.
      display: grid;
      width: 80%;
      // Grid template defines the rows and columns. Auto means
      // the content defines the height of each row. The more content
      //  you add the more the height of the whole row grows. Fr is a
      //  fraction unit, that means we divide each column equally.
      grid-template: repeat(3, auto) / repeat(6, 1fr);
      // Gap between rows and columns. First the distance bewtween rows,
      // then between columns.
      grid-gap: 1vw 2vw;
      input[type="text"] {
        // define the area the element takes. First the beginning-row,
        // then the beginning column, how many rows this spans, how
        // many columns this spans.
        grid-area: 1 / 2 / span 1 / span 2;
        font-size: 1.5vw;
        padding: 1vw 0.5vw;
      }
      input[type="password"] {
        grid-area: 2 / 2 / span 1 / span 2;
        font-size: 1.5vw;
        padding: 1vw 0.5vw;
      }
      input[type="email"] {
        grid-area: 3 / 2 / span 1 / span 2;
        font-size: 1.5vw;
        padding: 1vw 0.5vw;
      }
      textarea {
        grid-area: 1 / 4 / span 2 / span 2;
        font-size: 1.5vw;
        padding: 1vw 0.5vw;
      }
      button {
        color: white;
        background: green;
        border: none;
        grid-area: 3 / 4 / span 1 / span 1;
        font-size: 1.5vw;
        padding: 1vw 0.5vw;
        :hover {
          cursor: pointer;
        }
      }
    }
  }
  #gallery {
    padding: 5vw 0;
    display: grid;
    display: grid;
    width: 80%;
    margin: 1vw auto;
    grid-template: repeat(5, 6.5vw) / repeat(14, 1fr);
    grid-gap: 0.5vw 1vw;
    div {
      transition: box-shadow 0.4s ease-out;
      &:hover {
        box-shadow: 0 0 0.7vw black;
        cursor: pointer;
      }
      background: {
        repeat: no-repeat;
        size: 100% 100%;
      }
        @each $name, $row_start, $col_start, $row_span, $col_span
                    in (kastro, 1, 1, 3, 2),
                       (krioneri, 1, 3, 3, 2),
                       (lixnos, 1, 5, 2, 5),
                       (panagia, 1, 10, 2, 5),
                       (parga, 4, 1, 2, 4),
                       (parga_2, 3, 5, 3, 3),
                       (parga_3, 3, 8, 3, 4),
                       (valtos, 3, 12, 3, 3) {
          &.#{$name} {
            background-image: url(../#{$name}.jpg);
            grid-row-start: $row_start;
            grid-column-start: $col_start;
            grid-row-end: span $row_span;
            grid-column-end: span $col_span;
          }
      }
    }
  }
}
